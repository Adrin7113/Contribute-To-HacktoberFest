/* Here our main focus is to learn two pointer approach ,How we can solve it using two pointer approach for merging two sorted arrays.
   You have been given two sorted arrays/lists(ARR1 and ARR2) of size N and M respectively, merge them into a third array/list such that the third array is also sorted.
   
   Input format :
   The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.
   First line of each test case or query contains an integer 'N' representing the size of the first array/list.
   Second line contains 'N' single space separated integers representing the elements of the first array/list.
   Third line contains an integer 'M' representing the size of the second array/list.
    Fourth line contains 'M' single space separated integers representing the elements of the second array/list.
    
    Input:
    1
    5
    1 3 4 7 11
    4
    2 4 6 13
    
    Output:
    1 2 3 4 4 6 7 11 13 
    
    Note : Here merge function is given to us ,assumed that we will be given array as input ,and we have to complete that ,I hope everyone can create the main function.
    
*/
// This is the snippet
// Make sure you do tracing on paper.
   public static int[] merge(int arr1[], int arr2[])
    {
          int m = arr1.length;
          int n =  arr2.length,i=0,j=0,k=0;
          int ans[] = new int[m+n];
          /*Here with pointer i and j we are camparing elements and whichever the element smallest is copied to third array(ans) and then
            respective pointer and the ans array indexing is incremented*/
               while((i<arr1.length) && (j<arr2.length))
              {
                   if(arr1[i]<=arr2[j])
                   {
                       ans[k] = arr1[i];
                       i++;
                       k++;
                   }
                  else 
                  {
                      ans[k] = arr2[j];
                       j++;
                      k++;
                  }
              }
           // when  arr1  have elements still left ,where as all the elements of arr2 is copied
         while(i<arr1.length)
         {
             ans[k] = arr1[i];
             i++;
             k++;
         }
         // when  arr2  have elements still left ,where as all the elements of arr1 is copied
         while(j<arr2.length)
         {
             ans[k] = arr2[j];
             j++;
             k++;
         }
        
        
        return ans;
    }
    
    Hope you loved the program
    
